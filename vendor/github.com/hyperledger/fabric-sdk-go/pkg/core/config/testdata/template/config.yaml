#
# Copyright SecureKey Technologies Inc. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
#
# Default GO SDK Configuration
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#
name: "default-network"

#
# Describe what the target network is/does.
#
description: "The network description"

#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: 1.0.0

#
# The client section used by GO SDK.
#
client:
  # Which organization does this application instance belong to? The value must be the name of an org
  # defined under "organizations"
  organization: match_value_with_one_of_organizations

  logging:
    level: info

  # Global configuration for peer, event service and orderer timeouts
  # if this this section is omitted, then default values will be used (same values as below)
#  peer:
#    timeout:
#      connection: 10s
#      response: 180s
#      discovery:
#        # Expiry period for discovery service greylist filter
#        # The channel client will greylist peers that are found to be offline
#        # to prevent re-selecting them in subsequent retries.
#        # This interval will define how long a peer is greylisted
#        greylistExpiry: 10s
#  eventService:
#    # Event service type (optional). If not specified then the type is automatically
#    # determined from channel capabilities.
#    type: (deliver|eventhub)
    # the below timeouts are commented out to use the default values that are found in
    # "pkg/fab/endpointconfig.go"
    # the client is free to override the default values by uncommenting and resetting
    # the values as they see fit in their config file
#    timeout:
#      connection: 15s
#      registrationResponse: 15s
#  orderer:
#    timeout:
#      connection: 15s
#      response: 15s
#  discovery:
#    timeout:
#      connection: 15s
#      response: 15s
#  global:
#    timeout:
#      query: 180s
#      execute: 180s
#      resmgmt: 180s
#    cache:
#      connectionIdle: 30s
#      eventServiceIdle: 2m
#      channelConfig: 30m
#      channelMembership: 30s
#      discovery: 10s
#      selection: 10m

  # Needed to load users crypto keys and certs.
  cryptoconfig:
    path: path/to/cryptoconfig

  # Some SDKs support pluggable KV stores, the properties under "credentialStore"
  # are implementation specific
  credentialStore:
    # [Optional]. Used by user store. Not needed if all credentials are embedded in configuration
    # and enrollments are performed elswhere.
    path: unused/by/sdk/go

    # [Optional]. Specific to the CryptoSuite implementation used by GO SDK. Software-based implementations
    # requiring a key store. PKCS#11 based implementations does not.
    cryptoStore:
      # Specific to the underlying KeyValueStore that backs the crypto key store.
      path: /usually/it/is/tmp/msp

   # BCCSP config for the client. Used by GO SDK.
  BCCSP:
    security:
     enabled: true
     default:
      # provider: "SW"
      provider: ""
     # hashAlgorithm: "SHA2"
     hashAlgorithm: ""
     softVerify: true
     level: 256
     pin: "somepin"
     label: "ForFabric"
     #library: "/usr/lib/x86_64-linux-gnu/softhsm/libsofthsm2.so, /usr/lib/softhsm/libsofthsm2.so ,/usr/lib/s390x-linux-gnu/softhsm/libsofthsm2.so, /usr/lib/powerpc64le-linux-gnu/softhsm/libsofthsm2.so, /usr/local/Cellar/softhsm/2.1.0/lib/softhsm/libsofthsm2.so"
     library: "add BCCSP library here"

  #tlsCerts:
    # [Optional]. Use system certificate pool when connecting to peers, orderers (for negotiating TLS) Default: false
    #systemCertPool: true

#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:
  # name of the channel
#  mychannel:
    # Required. list of orderers designated by the application to use for transactions on this
    # channel. This list can be a result of access control ("org1" can only access "ordererA"), or
    # operational decisions to share loads from applications among the orderers.  The values must
    # be "names" of orgs defined under "organizations/peers"
    # deprecated: not recommended, to override any orderer configuration items, entity matchers should be used.
#    orderers:
#      - orderer.example.com

    # Required. list of peers from participating orgs
#    peers:
#      peer0.org1.example.com:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
#        endorsingPeer: true

        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
#        chaincodeQuery: true

        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
#        ledgerQuery: true

        # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # produce events but the app typically only needs to connect to one to listen to events.
        # Default: true
#        eventSource: true

    # [Optional]. The application can use these options to perform channel operations like retrieving channel
    # config etc.
#    policies:
       #[Optional] options for retrieving channel configuration blocks
#      queryChannelConfig:
         #[Optional] min number of success responses (from targets/peers)
#        minResponses: 1
         #[Optional] channel config will be retrieved for these number of random targets
#        maxTargets: 1
        #[Optional] retry options for query config block
#        retryOpts:
          #[Optional] number of retry attempts
#          attempts: 5
          #[Optional] the back off interval for the first retry attempt
#          initialBackoff: 500ms
          #[Optional] the maximum back off interval for any retry attempt
#          maxBackoff: 5s
          #[Optional] he factor by which the initial back off is exponentially incremented
#          backoffFactor: 2.0

  # sample channel with channel matcher (sample*channel will return ch1 config where * can be any word or '')
#  ch1:
#
#    orderers:
#      - orderer.example.com
#
#    peers:
#      peer0.org2.example.com:
#        endorsingPeer: true
#        chaincodeQuery: true
#        ledgerQuery: true
#        eventSource: true

#
# list of participating organizations in this network
#
organizations:
#  org1:
#    mspid: Org1MSP

#    peers:
#      - peer0.org1.example.com

    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
#    certificateAuthorities:
#      - ca.org1.example.com
#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
#  orderer.example.com:
#    url: grpcs://orderer.example.com:7050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
#    grpcOptions:
#      ssl-target-name-override: orderer.example.com
#   #these are keep alive client parameters:
#      Make sure these parameters are set in coordination with the keepalive policy on the server,
#      as incompatible settings can result in closing of connection.
#      After a duration of this time if the client doesn't see any activity
#      it pings the server to see if the transport is still alive.
#      The current default value is infinity   
#      keep-alive-time: 5s
#      After having pinged for keepalive check, the client waits for a duration of Timeout 
#      and if no activity is seen even after that the connection is closed.
#      The current default value is 20 seconds
#      keep-alive-timeout: 6s
#      If true, client runs keepalive checks even with no active RPCs
#      keep-alive-permit: false
    #fail-fast is action to take when an RPC is attempted on broken connections or unreachable servers
#      fail-fast: true

#      will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
#      allow-insecure: false

#    tlsCACerts:
      # Certificate location absolute path
#      path: ${GOPATH}/src/github.com/hyperledger/fabric-sdk-go/test/fixtures/channel/crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
#  peer0.org1.example.com:
    # this URL is used to send endorsement and query requests
#    url: grpcs://peer0.org1.example.com:7051

    # this URL is used to connect the EventHub and registering event listeners
#    eventUrl: grpcs://peer0.org1.example.com:7053

#    grpcOptions:
#      ssl-target-name-override: peer0.org1.example.com
#      will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
#      allow-insecure: false

#    tlsCACerts:
      # Certificate location absolute path
#      path: path/to/tls/cert/for/peer0/org1

#
# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows
# certificate management to be done via REST APIs. Application may choose to use a standard
# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.
#
certificateAuthorities:
#  ca.org1.example.com:
#    url: https://ca.org1.example.com:7054
#    tlsCACerts:
#      dash-pipe ('- |') delimited pem strings of CA cert
#      pem: 'pem strings of CA cert'
      # Comma-Separated list of paths
#      path: path/to/tls/cert/for/ca-org1
      # Client key and cert for SSL handshake with Fabric CA
#      client:
#        key:
#          path: path/to/client_fabric_client-key.pem
#          pem: `key pem'
#        cert:
#          path: path/to/client_fabric_client-key.pem
#          pem: `cert pem`

    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
    # needed to enroll and invoke new users.
#    registrar:
#      enrollId: usually-it-is_admin
#      enrollSecret: adminpasswd
    # [Optional] The optional name of the CA.
#    caName: ca.org1.example.com

# EntityMatchers enable substitution of network hostnames with static configurations
 # so that properties can be mapped. Regex can be used for this purpose
# UrlSubstitutionExp can be empty which means the same network hostname will be used
# UrlSubstitutionExp can be given same as mapped peer url, so that mapped peer url can be used
# UrlSubstitutionExp can have golang regex matchers like $1.local.example.$2:$3 for pattern
 # like peer0.org1.example.com:1234 which converts peer0.org1.example.com to peer0.org1.local.example.com:1234
# EventUrlSubstitutionExp and sslTargetOverrideUrlSubstitutionExp follow in the same lines as
 # SubstitutionExp for the fields eventUrl and gprcOptions.ssl-target-name-override respectively
# In any case mappedHost's config will be used, so mapped host cannot be empty, if entityMatchers are used
entityMatchers:
  #peer:
    #- pattern: (\w+).example.(\w+)
      #urlSubstitutionExp: localhost:7051
      #eventUrlSubstitutionExp: localhost:7053
      #sslTargetOverrideUrlSubstitutionExp: localhost
      #mappedHost: peer0.org1.example.com

    #- pattern: (\w+).example2.(\w+):(\d+)
      #urlSubstitutionExp: localhost:7051
      #eventUrlSubstitutionExp: localhost:7053
      #sslTargetOverrideUrlSubstitutionExp: localhost
      #mappedHost: peer0.org2.example.com

    #- pattern: (\w+).example3.(\w+)
      #urlSubstitutionExp:
      #eventUrlSubstitutionExp:
      #sslTargetOverrideUrlSubstitutionExp:
      #mappedHost: peer0.org1.example.com

    #- pattern: (\w+).example4.(\w+):(\d+)
      #urlSubstitutionExp: $1.org1.example.$2:$3
      #eventUrlSubstitutionExp: $1.org1.example.$2:7053
      #sslTargetOverrideUrlSubstitutionExp: $1.org1.example.$2
      #mappedHost: peer0.org1.example.com

  #orderer:
    #- pattern: (\w+).example2.(\w+)
      #urlSubstitutionExp: localhost:7050
      #sslTargetOverrideUrlSubstitutionExp: localhost
      #mappedHost: orderer.example.com

    #- pattern: (\w+).example.(\w+)
      #urlSubstitutionExp: localhost:7050
      #sslTargetOverrideUrlSubstitutionExp: localhost
      #mappedHost: orderer.example.com

    #- pattern: (\w+).example3.(\w+)
      #urlSubstitutionExp:
      #sslTargetOverrideUrlSubstitutionExp:
      #mappedHost: orderer.example.com

    #- pattern: (\w+).example4.(\w+):(\d+)
      #urlSubstitutionExp: $1.example.$2:$3
      #sslTargetOverrideUrlSubstitutionExp: $1.org1.example.$2
      #mappedHost: orderer.example.com

  #certificateAuthority:
    #- pattern: (\w+).org1.example.(\w+)
      #urlSubstitutionExp:
      #mappedHost: ca.org1.example.com

    #- pattern: (\w+).org2.example.(\w+)
      #urlSubstitutionExp:
      #mappedHost: ca.org2.example.com

#  channel:
#    - pattern: ^(sample)(\w*)(channel)$
#      mappedName: ch1